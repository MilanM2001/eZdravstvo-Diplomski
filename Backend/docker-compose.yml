version: '3.8'

services:

  api_gateway:
    build:
      context: ./api_gateway/
      dockerfile: Dockerfile
    container_name: api_gateway
    restart: on-failure
    ports:
      - "8000:8000"
    depends_on:
      - registrar_service
      - auth_service
      - healthcare_service
    networks:
      - network

  registrar_service:
    image: registrar_service
    container_name: registrar_service
    build:
      context: .
      dockerfile: ./registrar_service/Dockerfile
    restart: always
    ports:
      - ${REGISTRAR_SERVICE_PORT}:${REGISTRAR_SERVICE_PORT}
    environment:
      REGISTRAR_SERVICE_HOST: ${REGISTRAR_SERVICE_HOST}
      REGISTRAR_SERVICE_PORT: ${REGISTRAR_SERVICE_PORT}
      REGISTRAR_DB_HOST: ${REGISTRAR_DB_HOST}
      REGISTRAR_DB_PORT: ${REGISTRAR_DB_PORT}
      SECRET_KEY: ${SECRET_KEY}
      NATS_URI: ${NATS_URI}
      CHECK_USER_JMBG: ${CHECK_USER_JMBG}
      GET_USER_BY_JMBG: ${GET_USER_BY_JMBG}
      CREATE_USER: ${CREATE_USER}
      DELETE_KARTON: ${DELETE_KARTON}
      DELETE_CREDENTIALS: ${DELETE_CREDENTIALS}
    networks:
      - network
    depends_on:
      - registrar_db
      - nats

  auth_service:
    image: auth_service
    container_name: auth_service
    build:
      context: .
      dockerfile: ./auth_service/Dockerfile
    restart: always
    ports:
      - ${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}
    environment:
      AUTH_SERVICE_HOST: ${AUTH_SERVICE_HOST}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
      AUTH_DB_HOST: ${AUTH_DB_HOST}
      AUTH_DB_PORT: ${AUTH_DB_PORT}
      SECRET_KEY: ${SECRET_KEY}
      NATS_URI: ${NATS_URI}
      CHECK_USER_JMBG: ${CHECK_USER_JMBG}
      POST_KARTON: ${POST_KARTON}
      DELETE_CREDENTIALS: ${DELETE_CREDENTIALS}
    networks:
      - network
    depends_on:
      - auth_db
      - nats

  healthcare_service:
    image: healthcare_service
    container_name: healthcare_service
    build:
      context: .
      dockerfile: ./healthcare_service/Dockerfile
    restart: always
    ports:
      - ${HEALTHCARE_SERVICE_PORT}:${HEALTHCARE_SERVICE_PORT}
    environment:
      HEALTHCARE_SERVICE_HOST: ${HEALTHCARE_SERVICE_HOST}
      HEALTHCARE_SERVICE_PORT: ${HEALTHCARE_SERVICE_PORT}
      HEALTHCARE_DB_HOST: ${HEALTHCARE_DB_HOST}
      HEALTHCARE_DB_PORT: ${HEALTHCARE_DB_PORT}
      SECRET_KEY: ${SECRET_KEY}
      CHECK_USER_JMBG: ${CHECK_USER_JMBG}
      GET_USER_BY_JMBG: ${GET_USER_BY_JMBG}
      CREATE_USER: ${CREATE_USER}
      POST_KARTON: ${POST_KARTON}
      DELETE_KARTON: ${DELETE_KARTON}
      GET_STANJE_BY_JMBG: ${GET_STANJE_BY_JMBG}
      NATS_URI: ${NATS_URI}
    networks:
      - network
    depends_on:
      - healthcare_db
      - nats

  registrar_db:
    image: mongo
    container_name: registrar_db
    restart: on-failure
    networks:
      - network
    volumes:
      - registrar_db:/data/db

  auth_db:
    image: mongo
    container_name: auth_db
    restart: on-failure
    networks:
      - network
    volumes:
      - auth_db:/data/db

  healthcare_db:
    image: mongo
    container_name: healthcare_db
    restart: on-failure
    networks:
      - network
    volumes:
     - healthcare_db:/data/db

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - network

volumes:
  mongo_store:
  auth_db:
  registrar_db:
  healthcare_db:

networks:
  network:
    driver: bridge